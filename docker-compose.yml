version: "3"
services:
    spark:
        build:
            context: ./
            dockerfile: ./docker/Spark.Dockerfile
        image: victor755555/class-spark-master
        command: ["bash", "-c", "cd $${SPARK_HOME} && bin/spark-class org.apache.spark.deploy.master.Master"]
        volumes: 
            - ./:/app/
        ports:
            - 3000:3000
            # WebUI
            - 8080:8080
            # Spark
            - 7077:7077
            - 4040:4040
    spark-jupyter:
        build:
            context: ./
            dockerfile: ./docker/Spark.Dockerfile
        image: victor755555/class-spark-master
        command: jupyter notebook --port=3000 --ip=0.0.0.0 --allow-root
        ports:
            # Jupyter
            - 3000:3000
        volumes: 
            - ./:/app/
    zookeeper:
        image: confluentinc/cp-zookeeper:5.2.2
        ports:
        - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: "2181"
    # kafka server
    kafka0:
        image: confluentinc/cp-kafka:5.5.1
        ports:
        - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 0
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_LISTENERS: "INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092,EXTERNAL2://0.0.0.0:9093"
            KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka0:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,EXTERNAL2://kafka0:9093"
            KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,EXTERNAL2:PLAINTEXT"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
        depends_on:
        - "zookeeper"
    schema-registry:
        image: confluentinc/cp-schema-registry:5.2.2
        ports:
        - "8081:8081"
        environment:
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka0:19092"
            SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
            SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
            SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: "1"
        depends_on:
        - "kafka0"
    rest-proxy:
        image: confluentinc/cp-kafka-rest:5.2.2
        ports:
        - "8082:8082"
        environment:
            KAFKA_REST_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka0:19092"
            KAFKA_REST_LISTENERS: "http://0.0.0.0:8082/"
            KAFKA_REST_HOST_NAME: "rest-proxy"
            KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081/"
        depends_on:
        - "kafka0"
        - "schema-registry"
    topics-ui:
        image: landoop/kafka-topics-ui:0.9.4
        ports:
        - "8085:8085"
        environment:
            PORT: "8085"
            PROXY: "true"
            KAFKA_REST_PROXY_URL: "http://rest-proxy:8082"
        depends_on:
        - "rest-proxy"
    schema-registry-ui:
        image: landoop/schema-registry-ui:0.9.5
        ports:
        - "8086:8086"
        environment:
            PORT: "8086"
            PROXY: "true"
            SCHEMAREGISTRY_URL: "http://schema-registry:8081/"
        depends_on:
        - "schema-registry"
    producer:
        build:
            context: ./
            dockerfile: ./docker/KafkaProducer.Dockerfile
        image: victor755555/class-producer
        volumes:
            - ./:/app/
    consumer:
        build:
            context: ./
            dockerfile: ./docker/KafkaConsumer.Dockerfile
        image: victor755555/class-consumer
        volumes:
            - ./:/app/